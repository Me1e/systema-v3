name: Deploy

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths-ignore:
      - '**/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - '.gitignore'
      - 'LICENSE'
      - 'docs/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-main
      cancel-in-progress: false
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.HETZNER_SSH_KEY }}

      - name: Add host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: Sync repo to server
        run: |
          rsync -az \
            --delete \
            --exclude node_modules \
            --exclude .next \
            --exclude .git \
            --exclude ".env" \
            ./ ${{ secrets.USER }}@${{ secrets.HOST }}:${{ secrets.REMOTE_PATH }}

      - name: Upload .env from secret (optional)
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
        run: |
          if [ -n "${ENV_FILE}" ]; then
            ssh ${{ secrets.USER }}@${{ secrets.HOST }} "mkdir -p ${{ secrets.REMOTE_PATH }}"
            printf '%s\n' "${ENV_FILE}" | ssh ${{ secrets.USER }}@${{ secrets.HOST }} "cat > ${{ secrets.REMOTE_PATH }}/.env.new"
            # 서버에서 기존 .env와 비교하여 동일하면 교체하지 않음
            ssh ${{ secrets.USER }}@${{ secrets.HOST }} "cd ${{ secrets.REMOTE_PATH }}; \
              if [ -f .env ]; then \
                if cmp -s .env.new .env; then echo 'ENV unchanged: keeping existing .env'; rm -f .env.new; touch .env.changed.flag; rm -f .env.changed.flag; else mv -f .env.new .env; echo 'ENV updated'; touch .env.changed.flag; fi; \
              else mv -f .env.new .env; echo 'ENV created'; fi"
          else
            echo "ENV_FILE not provided; skipping upload"
          fi

      - name: Compose up (build on server)
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
        run: |
          FORCE=""
          # 서버에서 .env 변경 여부로 최종 재생성 결정
          CHANGED=$(ssh ${{ secrets.USER }}@${{ secrets.HOST }} "cd ${{ secrets.REMOTE_PATH }}; if [ -f .env.changed.flag ]; then echo yes; rm -f .env.changed.flag; else echo no; fi")
          if [ "${CHANGED}" = "yes" ]; then FORCE="--force-recreate"; fi
          ssh ${{ secrets.USER }}@${{ secrets.HOST }} "set -euo pipefail; \
            cd ${{ secrets.REMOTE_PATH }}; \
            if [ ! -f .env ]; then CAND=\"\"; CAND=$(find . .. \$HOME /opt /root -maxdepth 3 -type f -name .env 2>/dev/null | head -n1 || true); if [ -z \"$CAND\" ]; then echo 'ERROR: .env not found on server and ENV_FILE secret not provided'; pwd; ls -la; exit 1; fi; cp -f \"$CAND\" .env; echo Copied env file: \"$CAND\" -> .env; fi; \
            DOCKER_BUILDKIT=1 docker compose --env-file .env -f deploy/docker-compose.yml up -d --build ${FORCE}"
